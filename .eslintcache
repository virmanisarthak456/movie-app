[{"/Users/sarthak/Desktop/ReactWs/movie-app/src/index.js":"1","/Users/sarthak/Desktop/ReactWs/movie-app/src/reportWebVitals.js":"2","/Users/sarthak/Desktop/ReactWs/movie-app/src/components/App.js":"3","/Users/sarthak/Desktop/ReactWs/movie-app/src/components/Navbar.js":"4","/Users/sarthak/Desktop/ReactWs/movie-app/src/data.js":"5","/Users/sarthak/Desktop/ReactWs/movie-app/src/components/MovieCard.js":"6","/Users/sarthak/Desktop/ReactWs/movie-app/src/reducers/index.js":"7","/Users/sarthak/Desktop/ReactWs/movie-app/src/actions/index.js":"8"},{"size":3085,"mtime":1609528767802,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1608921482937,"results":"11","hashOfConfig":"10"},{"size":3406,"mtime":1609571576291,"results":"12","hashOfConfig":"10"},{"size":1874,"mtime":1609574715496,"results":"13","hashOfConfig":"10"},{"size":17598,"mtime":1608924872523,"results":"14","hashOfConfig":"10"},{"size":1453,"mtime":1609143968717,"results":"15","hashOfConfig":"10"},{"size":3351,"mtime":1609343692444,"results":"16","hashOfConfig":"10"},{"size":1834,"mtime":1609360939768,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1a4ip9r",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"/Users/sarthak/Desktop/ReactWs/movie-app/src/index.js",[],["40","41"],"/Users/sarthak/Desktop/ReactWs/movie-app/src/reportWebVitals.js",[],["42","43"],"/Users/sarthak/Desktop/ReactWs/movie-app/src/components/App.js",["44"],"import React from 'react';\n// removing the data from here because we will get it here via props \nimport {data} from '../data';\nimport Navbar from './Navbar';\nimport MovieCard from './MovieCard';\nimport {addMovies} from '../actions/index';\nimport {setShowFavourites} from '../actions/index';\nimport { connect } from \"../index\";\nimport{storeContext} from '../index'\n\nclass App extends React.Component {\n  // we made it a class component so that we can make API call , to fetch data from the data base \n  componentDidMount(){\n    this.props.store.subscribe(() => this.forceUpdate());\n     const {store} = this.props;\n\n    // now we are calling the subscribe function of the store so that we can update the state in store (2nd)\n\n    store.subscribe(()=>{\n      console.log('UPDATED');\n     //here the state will get updated  \n      this.forceUpdate();\n    })\n\n    // make API call to get the movies \n    // dispatch the action, to reducers\n\n    // whenever a dispatch is called (1st) it will dispatch an action and then it will go to subscribe\n    this.props.store.dispatch(addMovies(data),console.log('dispatched'));\n    // from here the subscribe will be called(as per REDUX flow diagram )\n    // after the subscribe call the controller will reach here \n    // console.log('Current state',this.props.store.getState());\n} \n\n  isMovieFavrouite=(movie)=>{\n      const {movies}= this.props.store.getState();// extracting movies from the { {movies},{search} }\n      // if index = -1, that mens the movie is not there in the list \n      const index = movies.Favourites.indexOf(movie);// Favourites is the object located in movies therefore we did this\n      // movies .favourites \n      if (index!==-1) {\n      // movie found \n      return true;\n      }\n      return false ;\n    }\n\n    onChangeTab=(val)=>{\n      this.props.store.dispatch(setShowFavourites(val));\n    }\n\n  render (){\n  // extracting  the movies from the state \n  const{ movies,search } = this.props.store.getState(); //{ {movies},{search} }\n  const {list,Favourites,ShowFavourites} = movies \n  // console.log('RENDER',this.props.getState());\n  const displayMovies = ShowFavourites ? Favourites:list;\n\n  return (\n    <div className=\"App\">\n    <Navbar  search={search}/>\n    <div className=\"main\">\n    <div className=\"tabs\">\n    <div className={`tab${ShowFavourites ?'':'active-tabs' }` } onClick={()=>this.onChangeTab(false)}> Movies</div>\n    <div className={`tab${ShowFavourites ?'active-tabs':'' }`}onClick={()=>this.onChangeTab(true)}> Favourites</div>\n    </div>\n    <div className=\"list\"> \n    {/* iterating over the list using map function  */}\n    {displayMovies.map((movie,index)=>(\n      // giving movie via props to movie \n      // to have a unique key we are using the index over here \n      < MovieCard movie = {movie} key={`movies-${index}`} dispatch={this.props.store.dispatch} \n      isFavrouite ={this.isMovieFavrouite(movie)} />\n    ))}\n\n    </div>\n    <div className=\"\">\n      {displayMovies.length===0?<div className=\"no-movies\"> No movies to display..!!</div>:null}\n\n    </div>\n    </div>\n    </div>\n  );\n    }\n}\n//we are making app wrapper over here \n// now we dont neet wrapper as we are using the connect \n\nclass AppWrapper extends React.Component {\n  render() {\n    return (\n      <storeContext.Consumer>\n        {(store) => <App store={store} />}\n      </storeContext.Consumer>\n    );\n  }\n}\n\nexport default AppWrapper;\n\n\n\n","/Users/sarthak/Desktop/ReactWs/movie-app/src/components/Navbar.js",["45"],"import React from 'react';\nimport {data}from '../data';\nimport{handleMovieSearch} from '../actions/index';\nimport {addMovieToList} from '../actions/index';\nimport { storeContext } from '..';\nclass Navbar extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n        // showSearchResults:false,\n        searchText:''\n        }\n    }\n    handleAddToMovies=(movie)=>{\n        this.props.dispatch(addMovieToList(movie));\n        this.setState({\n        showSearchResults:false\n        })\n\n    }\n    handleSearch=()=>{\n        const{searchText}=this.state;\n        this.props.dispatch(handleMovieSearch(searchText));\n    }\n    handleChange=(e)=>{\n        this.setState({\n        searchText:e.target.value\n        })\n\n    }\n    render(){\n        // const {showSearchResults}=this.state;\n        const{result:movie,showSearchResults}= this.props.search;\n        return (\n            <div className=\"nav\">\n            <div className=\"search-container\">\n            <input onChange={this.handleChange}/>\n            <button id=\"search-btn\" onClick={this.handleSearch}>Search</button>\n            {showSearchResults&&\n            <div className=\"search-results\">\n            <div className=\"search-result\">\n            <img src={movie.Poster} alt=\"search-pic\"/>\n            <div className=\"movie-info\">\n            <span>{movie.Title}</span>\n            <button onClick={()=>this.handleAddToMovies(movie)}>\n            Add to movies\n            </button>\n\n            </div>\n\n            </div>\n            </div>\n\n            }\n            </div>\n\n            </div>\n        )\n    }\n}\nclass NavbarWrapper extends React.Component{\n render(){\n     return(\n         <storeContext.Consumer>\n        {(store)=><Navbar dispatch={store.dispatch} search={this.props.search}/>}\n         </storeContext.Consumer>\n     )\n }\n} \nexport default NavbarWrapper;","/Users/sarthak/Desktop/ReactWs/movie-app/src/data.js",[],"/Users/sarthak/Desktop/ReactWs/movie-app/src/components/MovieCard.js",[],"/Users/sarthak/Desktop/ReactWs/movie-app/src/reducers/index.js",["46"],"import {combineReducers} from 'redux';\nimport {ADD_MOVIES, ADD_MOVIE_TO_LIST} from '../actions/index';\nimport {ADD_FAVOURITE} from '../actions/index';\nimport {REMOVE_FROM_FAVOURITE} from '../actions/index';\nimport {SET_SHOW_FAVOURITE} from '../actions/index';\nimport{ADD_SEARCH_RESULT} from '../actions/index';\n\nconst initialMovieState = {\nlist :[],\nFavourites:[],\nShowFavourites:false\n}\n// if the state will be undefined we will be using the empty array, though it will never be undefined\n\n// now we have changed the state from an array to an object so that it can have multiple arrays and \nexport  function movies(state=initialMovieState,action){\n    // we are not adding anything or removing anything from the state\n    // we are not changing anything in the current array , we returning the new array \n    // and this new array will be merged with the current array in the STORE \n   // now checking the type of the action if it is same to actions or not\n//     if (action.type===ADD_MOVIES) {\n//         // the reducers always has to return state\n//         return({\n//             ...state,\n//             list:action.movies\n//         })\n//     }\n//     return state;\nconsole.log('STATE REDUCER');\n    switch (action.type) {\n        case ADD_MOVIES:\n        return{\n        ...state,\n        list: action.movies\n        }\n        case ADD_FAVOURITE:\n        return{\n        ...state,\n        Favourites:[action.movie,...state.Favourites]\n        }\n        case REMOVE_FROM_FAVOURITE:{\n         // we are using filter function here so that it will return the filtered/new array \n        const filteredArray = state.Favourites.filter(\n        movie => movie.Title!== action.movie.Title\n        );\n        return{\n        ...state,\n        Favourites: filteredArray\n        }\n        }\n        case SET_SHOW_FAVOURITE:{\n        return{\n            ...state,\n            ShowFavourites:action.val\n\n        }\n        }\n        case ADD_MOVIE_TO_LIST:{\n            return{\n                ...state,\n                list:[action.movie,...state.list]\n            }\n        }\n         default:\n         return state\n         \n    }\n }\n\n // creating another reducer for the searching the movie \n const initialSearchState = {\n    result :{},\n    showSearchResults:false\n }\nexport function search(state= initialSearchState,action) {\n    console.log('SEARCH REDUCER');\n    // ADD_SEARCH_RESULT\n    switch (action.type) {\n        case ADD_SEARCH_RESULT:\n       return {\n           ...state,\n           result: action.movie,\n           showSearchResults:true\n        }\n        case ADD_MOVIE_TO_LIST:{\n            return{\n            ...state,\n            showSearchResults:false\n            }\n        }\n\n        default: return state;\n    }\n}\n\n// creating the root reducer to combine the states \nconst initialRootState ={\n// intialMovieState is defined above to combine it we are doing this \n    movies: initialMovieState,\n    search: initialSearchState\n}\n// export  function rootReducer(state=initialRootState,action ) {\n//     // this will return an object\n//     return{\n//     movies: movies(state.movies,action),\n//     search: search(state.search,action)\n//     }\n    \n// }\nexport default combineReducers({\n// the combine reducers will cll the reducers internally just like root reducer function is calling \nmovies:movies,\nsearch:search \n});\n\n    \n    \n","/Users/sarthak/Desktop/ReactWs/movie-app/src/actions/index.js",[],["47","48"],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"49","replacedBy":"53"},{"ruleId":"51","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":8,"column":10,"nodeType":"57","messageId":"58","endLine":8,"endColumn":17},{"ruleId":"55","severity":1,"message":"59","line":2,"column":9,"nodeType":"57","messageId":"58","endLine":2,"endColumn":13},{"ruleId":"55","severity":1,"message":"60","line":97,"column":7,"nodeType":"57","messageId":"58","endLine":97,"endColumn":23},{"ruleId":"49","replacedBy":"61"},{"ruleId":"51","replacedBy":"62"},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],["63"],["64"],"no-unused-vars","'connect' is defined but never used.","Identifier","unusedVar","'data' is defined but never used.","'initialRootState' is assigned a value but never used.",["63"],["64"],"no-global-assign","no-unsafe-negation"]